---
parameters:

  - name: PACKER_PATH
    type: string
    default: ""
    displayName: "What is the path to your packer HCL file?"

  - name: PACKER_FILE_NAME
    type: string
    default: ""
    displayName: "What is the name of your packer HCL file?"

  - name: ADD_CLIENT_IP_TO_NSG
    type: bool
    default: false
    displayName: "If the client IP should be added to the NSG"

  - name: NSG_ID
    type: string
    default: ""
    displayName: "The ID of the NSG if the enable client IP option"

  - name: AZURE_TARGET_CLIENT_ID
    default: ""
    type: string
    displayName: "What is the client id of the service principle you wish to use with Packer?"

  - name: AZURE_TARGET_CLIENT_SECRET
    default: ""
    type: string
    displayName: "What is the client of the service principle you wish to use with Packer?  Note, this value is a secret"

  - name: AZURE_TARGET_SUBSCRIPTION_ID
    default: ""
    type: string
    displayName: "What is the subscription ID of the target subscription you are trying to deploy to?"

  - name: AZURE_TARGET_TENANT_ID
    default: ""
    type: string
    displayName: "What is the tenant ID in which the target subscription resides?"

  - name: SHORTHAND_PROJECT_NAME
    default: ""
    type: string
    displayName: "What is the shorthand name for your project?"

  - name: SHORTHAND_ENVIRONMENT_NAME
    default: ""
    type: string
    displayName: "What is the shorthand (3 character) name for environment you are deploying to?"

  - name: SHORTHAND_LOCATION_NAME
    default: ""
    type: string
    displayName: "What is the shorthand location name? E.g. uks for UK South etc"


steps:
  - ${{ if (eq(parameters.ADD_CLIENT_IP_TO_NSG, true) }}:

      - pwsh: |
          $OutboundIp = (Invoke-RestMethod -Uri "https://checkip.amazonaws.com" -UseBasicParsing).Trim() ; `
          az login --service-principal --username $Env:ARM_CLIENT_ID --password $Env:ARM_CLIENT_SECRET --tenant $Env:ARM_TENANT_ID
          az account set --subscription $Env:ARM_SUBSCRIPTION_ID
          $nsgId = ${{ parameters.NSG_ID }}

          $subscriptionId = (Split-Path -Path $nsgId -Parent).Split('/')[2]
          $resourceGroupName = (Split-Path -Path $nsgId -Parent).Split('/')[4]
          $nsgName = Split-Path -Path $nsgId -Leaf ; `
          az account set --subscription $subscriptionId
          az network nsg rule create `
          --nsg-name $nsgName `
          --resource-group $resourceGroupName `
          --name "AddClientIPInbound" `
          --priority 100 `
          --source-address-prefixes "${OutboundIp}/32" `
          --destination-port-ranges 22 3389 `
          --destination-address-prefixes "VirtualNetwork" `
          --access Allow `
          --protocol Tcp `
          --description "Allow inbound access on port to ports, added by Azure DevOps on $(Get-Date) - build - $(Build.BuildId)"

        displayName: 'Get Outbound IP and add to NSG'
        continueOnError: false
        enabled: true
        env:
          ARM_CLIENT_ID: ${{ parameters.AZURE_TARGET_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ parameters.AZURE_TARGET_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ parameters.AZURE_TARGET_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ parameters.AZURE_TARGET_TENANT_ID }}


      - pwsh: |
          if ($IsLinux)
          {
          $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
          foreach ($line in $brewShellEnv) {
          Invoke-Expression $line
          }
          brew install packer ; `
          packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }}  ; packer build ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
          }
          elseif ($IsMacOS)
          {
          $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
          foreach ($line in $brewShellEnv) {
          Invoke-Expression $line
          }
          brew install packer ; `
          packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }}  ; packer build ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
          }
          elseif ($IsWindows)
          {
            Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            choco install packer -y ; `
            packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} ; ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
          }
        displayName: 'Packer install, validate and build'
        continueOnError: false
        enabled: true
        env:
          PKR_VAR_short: ${{ parameters.SHORTHAND_PROJECT_NAME }}
          PKR_VAR_env: ${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}
          PKR_VAR_loc: ${{ parameters.SHORTHAND_LOCATION_NAME }}

          ARM_CLIENT_ID: ${{ parameters.AZURE_TARGET_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ parameters.AZURE_TARGET_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ parameters.AZURE_TARGET_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ parameters.AZURE_TARGET_TENANT_ID }}


      - pwsh: |
          az login --service-principal --username $Env:ARM_CLIENT_ID --password $Env:ARM_CLIENT_SECRET --tenant $Env:ARM_TENANT_ID
          az account set --subscription $Env:ARM_SUBSCRIPTION_ID
          $nsgId = ${{ parameters.NSG_ID }}
          $subscriptionId = (Split-Path -Path $nsgId -Parent).Split('/')[2]
          $resourceGroupName = (Split-Path -Path $nsgId -Parent).Split('/')[4]
          $nsgName = Split-Path -Path $nsgId -Leaf ; `
          az account set --subscription $subscriptionId
          az network nsg rule delete `
          --nsg-name $nsgName `
          --resource-group $resourceGroupName `
          --name "AddClientIPInbound" `

        displayName: 'Remove Temporary Rule'
        continueOnError: true
        condition: always()
        enabled: true
        env:
          ARM_CLIENT_ID: ${{ parameters.AZURE_TARGET_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ parameters.AZURE_TARGET_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ parameters.AZURE_TARGET_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ parameters.AZURE_TARGET_TENANT_ID }}

  - ${{ if (eq(parameters.ADD_CLIENT_IP_TO_NSG, false) }}:

      - pwsh: |
          if ($IsLinux)
          {
          $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
          foreach ($line in $brewShellEnv) {
          Invoke-Expression $line
          }
          brew install packer ; `
          packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }}  ; packer build ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
          }
          elseif ($IsMacOS)
          {
          $brewShellEnv = & /home/linuxbrew/.linuxbrew/bin/brew shellenv
          foreach ($line in $brewShellEnv) {
          Invoke-Expression $line
          }
          brew install packer ; `
          packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }}  ; packer build ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
          }
          elseif ($IsWindows)
          {
            Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
            choco install packer -y ; `
            packer validate ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} ; ${{ parameters.PACKER_PATH }}/${{ parameters.PACKER_FILE_NAME }} 
          }
        displayName: 'Packer install, validate and build'
        continueOnError: false
        enabled: true
        env:
          PKR_VAR_short: ${{ parameters.SHORTHAND_PROJECT_NAME }}
          PKR_VAR_env: ${{ parameters.SHORTHAND_ENVIRONMENT_NAME }}
          PKR_VAR_loc: ${{ parameters.SHORTHAND_LOCATION_NAME }}

          ARM_CLIENT_ID: ${{ parameters.AZURE_TARGET_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ parameters.AZURE_TARGET_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ parameters.AZURE_TARGET_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ parameters.AZURE_TARGET_TENANT_ID }}
